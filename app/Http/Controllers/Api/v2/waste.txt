public function competency(Request $request)
    {
        $user = $request->user();
        // Old Index
        // $groups = array();

        // $per_page = $request->input('per_page', -1);
        // $sort_by = $request->input('sort_by', 'created_at');
        // $sort_dir = $request->input('sort_dir', 'asc');
        // $search = $request->input('search');


        // $companySkills = Assesment::
        //                 where( function($query) use ($search) {
        //                     $query->where('id', 'LIKE', "%{$search}%");
        //                 })
        //                 ->where('admin_id', $user->id)
        //                 ->distinct('skill_id')
        //                 ->select(['id', 'domain_id','core_id', 'code','skill_id'])
        //                 ->get()->toArray();

        // $competency = croxxtalent_competency_tree($companySkills);
        $groups = array();

        $per_page = $request->input('per_page', -1);
        $skill_gap = $request->input('skill_gap');
        $jobcode_gap = $request->input('jobcode_gap');
        $search = $request->input('search');

        $assessments = Assesment::join('assesment_summaries',
                    'assesment_summaries.assesment_id', '=', 'assesments.id')
                    ->where('assesments.admin_id', $user->id)
                    ->when($skill_gap, function($query) use ($skill_gap){
                        info($skill_gap);
                        $query ->where('assesments.skill_id', $skill_gap);
                     })
                     ->when($jobcode_gap, function($query) use ($jobcode_gap){
                        // info($jobcode_gap);
                        $query ->where('assesments.job_code_id', $jobcode_gap);
                     })
                    ->get()->toArray();



        foreach($assessments as $skill){
            $groups[$skill['talent_id']]['assesments'][] = $skill;
        }

        foreach($groups as $key => $competency ){
            $score = array_column($groups[$key]['assesments'], 'score_average');
            $groups[$key]['talent'] = Employee::where('user_id',$key)->with('job_code')->first();
            $groups[$key]['info'] = [
                'total_assesments' =>  count($groups[$key]['assesments']),
                'score_average' =>  array_sum($score)
            ];
        }

        $groups = array_values($groups);
        return response()->json([
            'status' => true,
            'data' => $groups,
            'message' => 'Data imported successfully.'
        ], 200);
    }
 public function storeTalentAnswer(Request $request)
    {
        $user = $request->user();

        $rules =[
            'assesment_id' => 'required|exists:assesments,id',
            'question_id' => 'required'
            // 'question_id' => 'required|exists:assesment_questions,id'
        ];

        $searchData = $request->validate($rules);
        $assessment = CroxxAssessment::where('id', $id)->where('is_published', 1)->firstOrFail();
        $question = Question::find($searchData['assesment_question_id']);

        $searchData['talent_id'] = $user->id;
        $searchData['assesment_question_id'] = $searchData['question_id'];
        unset($searchData['question_id']);

        $answer = TalentAnswer::firstOrCreate($searchData);

        if($question->type == 'text') {
            $request->validate([ 'answer' => 'required|min:10|max:250' ]);
            $answer->comment = $request->answer;
        }
        if($question->type == 'reference') {
            $regex = '/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/';
            $request->validate([ 'answer' => 'required|regex:'.$regex ]);
            $answer->comment = $request->answer;
        }
        if($question->type == 'radio'){
            $request->validate([ 'answer' => 'required|in:option1,option2,option3,option4' ]);
            $answer->option = $request->answer;
        }
        if($question->type == 'checkbox'){
            $request->validate([
                'answer' => 'required|array',
                'answer.*' => 'in:option1,option2,option3,option4'
            ]);
            $answer->options = $request->answer; //json
        }
        if($question->type == 'file'){
            if ($request->hasFile('file') && $request->file('file')->isValid()) {
                $extension = $request->file('file')->extension();
                $filename = $user->id . '-' . time() . '-' . Str::random(32);
                $filename = "{$filename}.$extension";
                $year = date('Y');
                $month = date('m');
                $rel_upload_path    = "assesment/{$year}/{$month}";
                if ( config('app.env') == 'local')  $rel_upload_path = "local/{$rel_upload_path}"; // dir for dev environment test uploads

                // do upload
                $uploaded_file_path = $request->file('file')->storeAs($rel_upload_path, $filename);
                Storage::setVisibility($uploaded_file_path, 'public'); //set file visibility to  "public"

                // Update with the newly update file
                $answer->upload = $request->comment;
            }else{
                return response()->json([
                    'status' => false,
                    'message' => 'File is not valid'
                ]);
            }

        }

        $answer->save();

        return response()->json([
            'status' => true,
            'data' => $answer,
            'message' => "Assesment Answer submited"
        ], 201);
    }
